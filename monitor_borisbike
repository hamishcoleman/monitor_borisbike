#!/usr/bin/env perl
use warnings;
use strict;
#
# Given a list of boris bike location ID, fetch the current available bikes
# at each location
#

use LWP::UserAgent;
use Getopt::Long 2.33 qw(:config gnu_getopt no_auto_abbrev);
use Pod::Usage;
use JSON;
use IO::File;

use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;
$Data::Dumper::Quotekeys = 0;

sub argparser {
    my $option = {
    };
    my @option_list = (
        "app_id=s",
        "app_key=s",
        "debug",
    );

    GetOptions($option,@option_list,'man','help|?') or pod2usage(2);
    if ($option->{help} && @option_list) {
        print("List of options:\n");
        print("\t");
        print join(",", @option_list);
        print("\n");
        exit(0);
    }
    pod2usage(-exitstatus => 0, -verbose => 2) if $option->{man};

    return $option;
}

sub get_BikePoint {
    my $ua = shift;
    my $id = shift;

    my $url = "https://api-tigris.tfl.gov.uk/Place/BikePoints_" . $id;
    # TODO:
    # - app_id, app_key
    
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if (!$res->is_success()) {
        die("Error fetching $url");
    }

    my $result = decode_json($res->content());
    return $result;
}

sub extract_data {
    my $json = shift;
    my $field = shift;

    # currently, the only data we are interested in is the Number of Bikes

    for my $prop (@{$json->{additionalProperties}}) {
        next if ($prop->{category} ne "Description");
        next if ($prop->{sourceSystemKey} ne "BikePoints");
        next if ($prop->{key} ne $field);
        return $prop->{value};
    }
    return undef;
}

sub render_config {
    my $db = shift;

    print("graph_title Boris Bikes available\n");
    print("graph_vlabel Bikes\n");
    print("graph_args --base 1000 --lower-limit 0\n");
    print("graph_category physical\n");
    print("graph_info This graph shows the number of boris bikes available at a number of locations\n");
    for my $json (values(%{$db->{json}})) {
        my $id = $json->{id};
        my $name = $json->{commonName};
        print($id.".label ".$name."\n");
    }
}

sub main {
    my $option = argparser();

    my $ua = LWP::UserAgent->new();

    my $db = {};

    my $cmd;
    if ($ARGV[0] !~ m/\d+/) {
        $cmd = shift @ARGV;
    } else {
        $cmd = "show";
    }

    my @ids;
    if (scalar(@ARGV)) {
        @ids = @ARGV;
    } else {
        die("Need id list");
    }

    for my $id (@ids) {
        $db->{json}{$id} = get_BikePoint($ua, $id);
        $db->{data}{$id} = extract_data($db->{json}{$id}, "NbBikes");
    }

    if ($option->{debug}) {
        print(Dumper($db));
    }

    if ($cmd eq 'config') {
        render_config($db);
        return;
    }

    if ($cmd eq 'show') {
        my @fields;
        push @fields, time();
        for my $id (@ids) {
            push @fields, $db->{data}{$id};
        }
        print(join(" ",@fields),"\n");
    }
}
unless(caller) {
    main();
}

